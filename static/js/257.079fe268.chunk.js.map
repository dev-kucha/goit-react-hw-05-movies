{"version":3,"file":"static/js/257.079fe268.chunk.js","mappings":"4TAEAA,IAAAA,SAAAA,QAAyB,+BAEzB,IAAMC,EAAa,QAEbC,EAAU,mCAET,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,6GAEoBH,IAAAA,IAAA,oBACRC,EADQ,YALP,MAKO,oBAC6BC,IAHjD,cAEGE,EAFH,yBAKIA,EAASC,KAAKC,SALlB,gCAOHC,QAAQC,MAAR,MAPG,gFAWA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAwBC,GAAxB,gGAEoBV,IAAAA,IAAA,iBAAoBU,EAApB,oBAAkCR,IAFtD,cAEGE,EAFH,yBAGIA,GAHJ,gCAKHG,QAAQC,MAAR,MALG,gFASA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA0BD,GAA1B,gGAEoBV,IAAAA,IAAA,iBAAoBU,EAApB,4BAA0CR,IAF9D,cAEGE,EAFH,yBAGIA,GAHJ,gCAKHG,QAAQC,MAAR,MALG,gFASA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA0BF,GAA1B,gGAEoBV,IAAAA,IAAA,iBAAoBU,EAApB,4BAA0CR,IAF9D,cAEGE,EAFH,yBAGIA,GAHJ,gCAKHG,QAAQC,MAAR,MALG,gFASA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAAyBC,GAAzB,gGAEoBd,IAAAA,IAAA,+BACGc,EADH,oBACoBZ,IAHxC,cAEGE,EAFH,yBAKIA,GALJ,gCAOHG,QAAQC,MAAR,MAPG,gF,gKC1CMO,GAAgBC,E,QAAAA,IAAOC,EAAAA,GAAPD,CAAH,kF,SCGX,SAASE,IACtB,IAIsBC,EAJdC,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAA0BE,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KAoBA,IAdAC,EAAAA,EAAAA,YAAU,WAAM,wCAGd,qGACyBhB,EAAAA,EAAAA,IAASW,GADlC,OACQM,EADR,OAKEF,EAASE,EAASrB,MALpB,4CAHc,0DAWdsB,EACD,GAAE,CAACP,IAECG,EAIL,OACE,iCACE,eAAGK,MAAO,CAAEC,SAAU,SAAtB,iBAAyCT,KACxCG,EAAMO,cACL,gBACEC,IAAG,0CAAqCR,EAAMO,aAC9CE,IAAG,UAAKT,EAAMU,eAAX,cAIP,0BACGV,EAAMU,eADT,KAC2B,IAAIC,KAAKX,EAAMY,cAAcC,cADxD,OAGCb,EAAMc,WACL,4BACE,sCACA,uBAAId,EAAMc,cAIbd,EAAMe,SACL,4BACE,oCAEA,wBA9CcnB,EA8CII,EAAMe,OA7CvBnB,EAAUoB,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,aAiD7C,kDACA,2BACE,yBACE,SAAC3B,EAAD,CAAe4B,GAAG,OAAlB,qBAEF,yBACE,SAAC5B,EAAD,CAAe4B,GAAG,UAAlB,2BAGJ,SAAC,EAAAC,SAAD,CAAUC,UAAU,wCAApB,UACE,SAAC,KAAD,QAIP,C","sources":["APIs/themoviedbApi.js","pages/MovieDetails/MovieDetails.styled.jsx","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst MEDIA_TYPE = 'movie';\nconst TIME_WINDOW = 'day';\nconst API_KEY = '70cddabccebaf467901819a0b3b6e799';\n\nexport async function getTrendingToday() {\n  try {\n    const response = await axios.get(\n      `/trending/${MEDIA_TYPE}/${TIME_WINDOW}?api_key=${API_KEY}`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getMovie(id) {\n  try {\n    const response = await axios.get(`/movie/${id}?api_key=${API_KEY}`);\n    return response;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getCredits(id) {\n  try {\n    const response = await axios.get(`/movie/${id}/credits?api_key=${API_KEY}`);\n    return response;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getReviews(id) {\n  try {\n    const response = await axios.get(`/movie/${id}/reviews?api_key=${API_KEY}`);\n    return response;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getMovies(query) {\n  try {\n    const response = await axios.get(\n      `/search/movie/?query=${query}&api_key=${API_KEY}`\n    );\n    return response;\n  } catch (error) {\n    console.error(error);\n  }\n}\n","import { NavLink } from 'react-router-dom';\n\nimport styled from 'styled-components';\n\nexport const NavLinkStyled = styled(NavLink)`\n  color: black;\n\n  &.active {\n    color: orange;\n  }\n`;\n","import { useState, useEffect, Suspense } from 'react';\nimport { Outlet, useParams } from 'react-router-dom';\n\nimport { getMovie } from 'APIs/themoviedbApi';\n\nimport { NavLinkStyled } from './MovieDetails.styled';\n\nexport default function MovieDetails() {\n  const { movieId } = useParams();\n  // console.log(movieId);\n  const [movie, setMovie] = useState(null);\n\n  const getGenresList = genresArr => {\n    return genresArr.map(genre => genre.name).join(', ');\n  };\n\n  useEffect(() => {\n    // console.log(movieId);\n    // console.log(Number(movieId));\n    async function fetchMovie() {\n      const resMovie = await getMovie(movieId);\n      // console.log(resMovie.data);\n      // console.log(resMovie.data.original_title);\n      // console.log(resMovie.data.poster_path);\n      setMovie(resMovie.data);\n    }\n\n    fetchMovie();\n  }, [movieId]);\n\n  if (!movie) {\n    return;\n  }\n\n  return (\n    <>\n      <p style={{ fontSize: 0.6 + 'em' }}>id: {movieId}</p>\n      {movie.poster_path && (\n        <img\n          src={`https://image.tmdb.org/t/p/w200/${movie.poster_path}`}\n          alt={`${movie.original_title} poster`}\n        />\n      )}\n\n      <h1>\n        {movie.original_title} ({new Date(movie.release_date).getFullYear()})\n      </h1>\n      {movie.overview && (\n        <div>\n          <h2>Overview</h2>\n          <p>{movie.overview}</p>\n        </div>\n      )}\n\n      {movie.genres && (\n        <div>\n          <h2>Genres</h2>\n          {/* <p>{console.log(movie.genres)}</p>; */}\n          <p>{getGenresList(movie.genres)}</p>\n        </div>\n      )}\n\n      <h4>Addition Information</h4>\n      <ul>\n        <li>\n          <NavLinkStyled to=\"cast\">Cast</NavLinkStyled>\n        </li>\n        <li>\n          <NavLinkStyled to=\"reviews\">Reviews</NavLinkStyled>\n        </li>\n      </ul>\n      <Suspense fallback={<div>Loading...</div>}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n}\n"],"names":["axios","MEDIA_TYPE","API_KEY","getTrendingToday","response","data","results","console","error","getMovie","id","getCredits","getReviews","getMovies","query","NavLinkStyled","styled","NavLink","MovieDetails","genresArr","movieId","useParams","useState","movie","setMovie","useEffect","resMovie","fetchMovie","style","fontSize","poster_path","src","alt","original_title","Date","release_date","getFullYear","overview","genres","map","genre","name","join","to","Suspense","fallback"],"sourceRoot":""}